import React, { useState } from 'react';
import { Search, Upload, FileText, X, Download, Trash2 } from 'lucide-react';
import mammoth from 'mammoth';

export default function KnowledgeBase() {
  const [documents, setDocuments] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedDoc, setSelectedDoc] = useState(null);
  const [isUploading, setIsUploading] = useState(false);

  const handleFileUpload = async (e) => {
    const files = Array.from(e.target.files);
    setIsUploading(true);

    for (const file of files) {
      try {
        const arrayBuffer = await file.arrayBuffer();
        const result = await mammoth.extractRawText({ arrayBuffer });
        const text = result.value;

        const newDoc = {
          id: Date.now() + Math.random(),
          name: file.name,
          content: text,
          uploadDate: new Date().toLocaleString('ru-RU'),
          size: file.size
        };

        setDocuments(prev => [...prev, newDoc]);
      } catch (error) {
        console.error('Ошибка загрузки файла:', error);
        alert(`Не удалось загрузить файл ${file.name}`);
      }
    }

    setIsUploading(false);
    e.target.value = '';
  };

  const handleDelete = (id) => {
    if (confirm('Удалить этот документ?')) {
      setDocuments(prev => prev.filter(doc => doc.id !== id));
      if (selectedDoc?.id === id) {
        setSelectedDoc(null);
      }
    }
  };

  const highlightText = (text, query) => {
    if (!query.trim()) return text;
    
    const words = query.toLowerCase().split(' ').filter(w => w.length > 0);
    let highlightedText = text;
    
    words.forEach(word => {
      const regex = new RegExp(`(${word})`, 'gi');
      highlightedText = highlightedText.replace(regex, '<mark class="bg-yellow-300">$1</mark>');
    });
    
    return highlightedText;
  };

  const searchDocuments = () => {
    if (!searchQuery.trim()) return documents;

    const query = searchQuery.toLowerCase();
    return documents.filter(doc => 
      doc.name.toLowerCase().includes(query) ||
      doc.content.toLowerCase().includes(query)
    ).map(doc => {
      const index = doc.content.toLowerCase().indexOf(query);
      const snippet = index !== -1 
        ? '...' + doc.content.substring(Math.max(0, index - 100), index + 200) + '...'
        : doc.content.substring(0, 200) + '...';
      
      return { ...doc, snippet };
    });
  };

  const filteredDocs = searchDocuments();

  const formatFileSize = (bytes) => {
    if (bytes < 1024) return bytes + ' Б';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' КБ';
    return (bytes / (1024 * 1024)).toFixed(1) + ' МБ';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Заголовок */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">База знаний</h1>
          <p className="text-gray-600">Загружайте Word-документы и ищите информацию</p>
        </div>

        {/* Панель загрузки и поиска */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex flex-col md:flex-row gap-4">
            {/* Загрузка */}
            <label className="flex-1 cursor-pointer">
              <div className="flex items-center justify-center gap-2 px-4 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition">
                <Upload size={20} />
                <span>{isUploading ? 'Загрузка...' : 'Загрузить файлы'}</span>
              </div>
              <input
                type="file"
                accept=".doc,.docx"
                multiple
                onChange={handleFileUpload}
                className="hidden"
                disabled={isUploading}
              />
            </label>

            {/* Поиск */}
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-3.5 text-gray-400" size={20} />
              <input
                type="text"
                placeholder="Поиск по документам..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
          </div>

          <div className="mt-4 text-sm text-gray-600">
            Документов в базе: <span className="font-semibold">{documents.length}</span>
            {searchQuery && ` | Найдено: ${filteredDocs.length}`}
          </div>
        </div>

        {/* Основной контент */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Список документов */}
          <div className="lg:col-span-1 bg-white rounded-lg shadow-lg p-4 max-h-[600px] overflow-y-auto">
            <h2 className="text-xl font-semibold mb-4 text-gray-800">Документы</h2>
            
            {filteredDocs.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                {documents.length === 0 ? (
                  <>
                    <FileText size={48} className="mx-auto mb-3 opacity-50" />
                    <p>Загрузите первый документ</p>
                  </>
                ) : (
                  <p>Ничего не найдено</p>
                )}
              </div>
            ) : (
              <div className="space-y-2">
                {filteredDocs.map(doc => (
                  <div
                    key={doc.id}
                    onClick={() => setSelectedDoc(doc)}
                    className={`p-3 rounded-lg cursor-pointer transition ${
                      selectedDoc?.id === doc.id
                        ? 'bg-indigo-100 border-2 border-indigo-500'
                        : 'bg-gray-50 hover:bg-gray-100 border-2 border-transparent'
                    }`}
                  >
                    <div className="flex items-start justify-between gap-2">
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center gap-2">
                          <FileText size={16} className="text-indigo-600 flex-shrink-0" />
                          <p className="font-medium text-sm text-gray-800 truncate">
                            {doc.name}
                          </p>
                        </div>
                        <p className="text-xs text-gray-500 mt-1">{doc.uploadDate}</p>
                        <p className="text-xs text-gray-400">{formatFileSize(doc.size)}</p>
                        {doc.snippet && searchQuery && (
                          <p className="text-xs text-gray-600 mt-2 line-clamp-2">
                            {doc.snippet}
                          </p>
                        )}
                      </div>
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDelete(doc.id);
                        }}
                        className="text-red-500 hover:text-red-700 p-1"
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Просмотр документа */}
          <div className="lg:col-span-2 bg-white rounded-lg shadow-lg p-6">
            {selectedDoc ? (
              <>
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h2 className="text-2xl font-semibold text-gray-800 mb-1">
                      {selectedDoc.name}
                    </h2>
                    <p className="text-sm text-gray-500">{selectedDoc.uploadDate}</p>
                  </div>
                  <button
                    onClick={() => setSelectedDoc(null)}
                    className="text-gray-500 hover:text-gray-700 p-1"
                  >
                    <X size={24} />
                  </button>
                </div>
                
                <div className="border-t pt-4 max-h-[500px] overflow-y-auto">
                  <div 
                    className="prose max-w-none text-gray-700 whitespace-pre-wrap"
                    dangerouslySetInnerHTML={{ 
                      __html: highlightText(selectedDoc.content, searchQuery) 
                    }}
                  />
                </div>
              </>
            ) : (
              <div className="h-full flex items-center justify-center text-gray-400">
                <div className="text-center">
                  <FileText size={64} className="mx-auto mb-4 opacity-30" />
                  <p>Выберите документ для просмотра</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
